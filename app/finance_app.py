import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
import pandas as pd
from tkcalendar import DateEntry
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class FinanceApp:
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å, —â–æ —Å—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ (Tk) —ñ –∫–µ—Ä—É—î –≤–∫–ª–∞–¥–∫–∞–º–∏:
    1. –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç
    2. –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
    3. –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏
    4. –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∞–¥–º—ñ–Ω-–≤–∫–ª–∞–¥–∫–∞)

    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î CategoryManager —Ç–∞ ExpenseManager –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏.
    """
    def __init__(self, root, category_manager, expense_manager):
        self.root = root
        self.root.title("–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –û–±–ª—ñ–∫")
        self.root.geometry("1000x700")

        # –ó–±–µ—Ä–µ–∂–µ–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —É –ø–æ–ª—è –∫–ª–∞—Å—É
        self.category_manager = category_manager
        self.expense_manager = expense_manager

        # –ù–∞–ª–∞—à—Ç—É—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è ttk
        self.setup_style()

        # ===== –í–µ—Ä—Ö–Ω—ñ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—à–∞–ø–∫–∞) =====
        header_frame = ttk.Frame(self.root, style="Header.TFrame")
        header_frame.pack(fill="x")

        title_label = ttk.Label(
            header_frame,
            text="–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –û–±–ª—ñ–∫",
            style="Header.TLabel"
        )
        title_label.pack(pady=5)

        # ===== Notebook (–≤–∫–ª–∞–¥–∫–∏) =====
        self.notebook = ttk.Notebook(self.root, style="MainNotebook.TNotebook")
        self.notebook.pack(expand=True, fill="both", padx=10, pady=10)

        self.entry_frame = ttk.Frame(self.notebook, style="MainFrame.TFrame")
        self.analysis_frame = ttk.Frame(self.notebook, style="MainFrame.TFrame")
        self.records_frame = ttk.Frame(self.notebook, style="MainFrame.TFrame")
        self.admin_frame = ttk.Frame(self.notebook, style="MainFrame.TFrame")

        self.notebook.add(self.entry_frame, text="–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç")
        self.notebook.add(self.analysis_frame, text="–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
        self.notebook.add(self.records_frame, text="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏")
        self.notebook.add(self.admin_frame, text="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤–∫–ª–∞–¥–∫–∏
        self.setup_entry_tab()
        self.setup_analysis_tab()
        self.setup_records_tab()
        self.setup_admin_tab()

        # –ü–æ–ª–µ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
        self.notification_label = ttk.Label(root, text="", foreground="green", style="Notification.TLabel")
        self.notification_label.pack(side="bottom", anchor="w", padx=10, pady=5)

    # -------------------------------------------------------------
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ (–±—ñ–ª—å—à—ñ —à—Ä–∏—Ñ—Ç–∏ —Ç–∞ —ñ–Ω—à–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è)
    # -------------------------------------------------------------
    def setup_style(self):
        style = ttk.Style(self.root)
        style.theme_use("clam")

        # ====== –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤ ======
        # –ó–±—ñ–ª—å—à–∏–º–æ —à—Ä–∏—Ñ—Ç–∏ (–¥–æ 12‚Äì14):
        BASE_FONT = ("Arial", 12)
        HEADING_FONT = ("Arial", 14, "bold")
        BIG_HEADING_FONT = ("Helvetica", 20, "bold")

        # ====== –§—Ä–µ–π–º–∏ ======
        style.configure("MainFrame.TFrame", background="#f0f2f5")
        style.configure("Header.TFrame", background="#2c3e50")

        # ====== Label ======
        style.configure("TLabel",
                        background="#f0f2f5",
                        foreground="#333",
                        font=BASE_FONT)
        style.configure("Header.TLabel",
                        background="#2c3e50",
                        foreground="white",
                        font=BIG_HEADING_FONT)
        style.configure("Notification.TLabel",
                        font=("Arial", 12, "italic"))

        # ====== Notebook ======
        style.configure("MainNotebook.TNotebook",
                        background="#f0f2f5",
                        tabposition="nw")
        style.configure("TNotebook.Tab",
                        background="#d7d7d7",
                        foreground="#000",
                        padding=10,
                        font=HEADING_FONT)
        style.map("TNotebook.Tab",
                  background=[("selected", "#ffffff")],
                  foreground=[("selected", "#000000")])

        # ====== –ö–Ω–æ–ø–∫–∏ ======
        style.configure("TButton",
                        font=BASE_FONT,
                        padding=5)

        # ====== –ü–æ–ª—è –≤–≤–æ–¥—É ======
        style.configure("TEntry",
                        font=BASE_FONT,
                        padding=3)
        style.configure("TCombobox",
                        font=BASE_FONT,
                        padding=3)

        # ====== Treeview (—Ç–∞–±–ª–∏—Ü—ñ) ======
        # –ó–±—ñ–ª—å—à—É—î–º–æ —à—Ä–∏—Ñ—Ç —Ç–∞ rowheight
        style.configure("Treeview",
                        background="white",
                        foreground="#333",
                        rowheight=30,
                        fieldbackground="white",
                        font=BASE_FONT,
                        borderwidth=1)

        style.configure("Treeview.Heading",
                        background="#007acc",
                        foreground="#ffffff",
                        font=HEADING_FONT)
        style.map("Treeview",
                  background=[("selected", "#cce5ff")])

    def load_main_records(self):
        df = self.expense_manager.get_expenses()
        self.tree_main.delete(*self.tree_main.get_children())  # –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º

        for i, row in enumerate(df.itertuples(index=False), start=1):
            tag = "evenrow" if i % 2 == 0 else "oddrow"
            self.tree_main.insert("", "end", values=row, tags=(tag,))

    # -------------------------------------------------------------
    # –í–∫–ª–∞–¥–∫–∞ "–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç"
    # -------------------------------------------------------------
    def setup_entry_tab(self):
        """ –°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É "–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç" –∑ —Ç–∞–±–ª–∏—Ü–µ—é —Ç–∞ —Ñ–æ—Ä–º–æ—é –≤–≤–µ–¥–µ–Ω–Ω—è. """
        content_frame = ttk.Frame(self.entry_frame, style="MainFrame.TFrame")
        content_frame.pack(expand=True, fill="both", padx=20, pady=20)

        # üìå –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–±–∞—Ä–∞
        table_frame = ttk.Frame(content_frame)
        table_frame.pack(expand=True, fill="both")

        # üìå –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Å–∫—Ä–æ–ª–±–∞—Ä
        y_scroll = ttk.Scrollbar(table_frame, orient="vertical")

        # üìå –¢–∞–±–ª–∏—Ü—è –≤–∏—Ç—Ä–∞—Ç (–∑ –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏ –º–µ–∂–∞–º–∏ –º—ñ–∂ –∫–æ–ª–æ–Ω–∫–∞–º–∏)
        self.tree_main = ttk.Treeview(
            table_frame,
            columns=("–î–∞—Ç–∞", "–°—É–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ö–æ–º–µ–Ω—Ç–∞—Ä"),
            show="headings",
            yscrollcommand=y_scroll.set
        )

        # üìå –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ —Å–∫—Ä–æ–ª–±–∞—Ä –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
        y_scroll.config(command=self.tree_main.yview)
        y_scroll.pack(side="right", fill="y")
        self.tree_main.pack(expand=True, fill="both", padx=5, pady=5)

        # üìå –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        self.tree_main.heading("–î–∞—Ç–∞", text="–î–∞—Ç–∞")
        self.tree_main.heading("–°—É–º–∞", text="–°—É–º–∞")
        self.tree_main.heading("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")
        self.tree_main.heading("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
        self.tree_main.heading("–ö–æ–º–µ–Ω—Ç–∞—Ä", text="–ö–æ–º–µ–Ω—Ç–∞—Ä")

        # üìå –ó–∞–¥–∞—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ (–î–∞—Ç–∞ —ñ –°—É–º–∞ –≤—É–∂—á—ñ)
        self.tree_main.column("–î–∞—Ç–∞", width=100, anchor="center")
        self.tree_main.column("–°—É–º–∞", width=100, anchor="center")
        self.tree_main.column("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", width=200, anchor="center")
        self.tree_main.column("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", width=200, anchor="center")
        self.tree_main.column("–ö–æ–º–µ–Ω—Ç–∞—Ä", width=250, anchor="w")

        # üìå –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è —Ä—è–¥–∫—ñ–≤ (—Å–º—É–≥–∞—Å—Ç—ñ —Ä—è–¥–∫–∏)
        self.tree_main.tag_configure("evenrow", background="#ffffff")
        self.tree_main.tag_configure("oddrow", background="#f7f7f7")

        # üìå –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–ø–∏—Å–∏ —É —Ç–∞–±–ª–∏—Ü—é –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É
        self.load_main_records()

        # üìå –§–æ—Ä–º–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏
        form_frame = ttk.Frame(content_frame, style="MainFrame.TFrame")
        form_frame.pack(side="bottom", fill="x", pady=10)

        ttk.Label(form_frame, text="–î–∞—Ç–∞").grid(row=0, column=0, sticky="w", padx=5)
        self.date_entry = DateEntry(form_frame, date_pattern='dd.MM.yyyy')
        self.date_entry.grid(row=1, column=0, padx=5)

        ttk.Label(form_frame, text="–°—É–º–∞").grid(row=0, column=1, sticky="w", padx=5)
        self.amount_entry = ttk.Entry(form_frame)
        self.amount_entry.grid(row=1, column=1, padx=5)
        self.amount_entry.bind("<KeyRelease>", self.validate_amount)

        ttk.Label(form_frame, text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è").grid(row=0, column=2, sticky="w", padx=5)
        self.category_cb = ttk.Combobox(
            form_frame,
            values=list(self.category_manager.categories.keys()),
            state="readonly"
        )
        self.category_cb.grid(row=1, column=2, padx=5)
        self.category_cb.bind("<<ComboboxSelected>>", self.update_subcategories)

        ttk.Label(form_frame, text="–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è").grid(row=0, column=3, sticky="w", padx=5)
        self.subcategory_cb = ttk.Combobox(form_frame, state="readonly")
        self.subcategory_cb.grid(row=1, column=3, padx=5)

        ttk.Label(form_frame, text="–ö–æ–º–µ–Ω—Ç–∞—Ä").grid(row=0, column=4, sticky="w", padx=5)
        self.comment_entry = ttk.Entry(form_frame)
        self.comment_entry.grid(row=1, column=4, padx=5)

        add_button = ttk.Button(form_frame, text="–î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É", command=self.add_expense)
        add_button.grid(row=1, column=5, padx=5)

        # üìå –†–æ–∑—Ç—è–≥–Ω–µ–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        for i in range(6):
            form_frame.columnconfigure(i, weight=1)

    def validate_amount(self, event):
        value = self.amount_entry.get()
        if not value.isdigit() and value != "":
            self.amount_entry.delete(len(value) - 1, tk.END)

    def update_subcategories(self, event):
        category = self.category_cb.get()
        subcats = self.category_manager.categories.get(category, [])
        self.subcategory_cb["values"] = subcats
        self.subcategory_cb.set("")

    def add_expense(self):
        record = {
            "–î–∞—Ç–∞": self.date_entry.get(),
            "–°—É–º–∞": self.amount_entry.get(),
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è": self.category_cb.get(),
            "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è": self.subcategory_cb.get(),
            "–ö–æ–º–µ–Ω—Ç–∞—Ä": self.comment_entry.get() if self.comment_entry.get() else ""
        }

        if not all([record["–î–∞—Ç–∞"], record["–°—É–º–∞"], record["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"], record["–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è"]]):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!")
            return

        self.expense_manager.add_expense(record)
        self.show_notification("–í–∏—Ç—Ä–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

        self.amount_entry.delete(0, tk.END)
        self.comment_entry.delete(0, tk.END)

        # üîπ –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
        self.load_main_records()

    # -------------------------------------------------------------
    # –í–∫–ª–∞–¥–∫–∞ "–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞"
    # -------------------------------------------------------------
    def setup_analysis_tab(self):
        controls_frame = ttk.Frame(self.analysis_frame, style="MainFrame.TFrame")
        controls_frame.pack(fill="x", padx=20, pady=10)

        ttk.Label(controls_frame, text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:").pack(side="left", padx=(0, 5))

        analysis_options = [
            "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫)",
            "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫)",
            "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∫—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞)",
            "–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—è–º–∏ (–ª—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫)",
            "–¢–û–ü-5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫)"
        ]
        self.analysis_type_cb = ttk.Combobox(controls_frame, values=analysis_options, state="readonly", width=50)
        self.analysis_type_cb.current(0)
        self.analysis_type_cb.pack(side="left", padx=5)

        ttk.Button(controls_frame, text="–û–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É", command=self.show_statistics).pack(side="left", padx=5)

        self.canvas_frame = ttk.Frame(self.analysis_frame, style="MainFrame.TFrame")
        self.canvas_frame.pack(expand=True, fill="both", padx=20, pady=10)

    def show_statistics(self):
        for widget in self.canvas_frame.winfo_children():
            widget.destroy()

        df = self.expense_manager.get_expenses()
        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.MM.yyyy
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce", format="%d.%m.%Y")
        df["–°—É–º–∞"] = pd.to_numeric(df["–°—É–º–∞"], errors="coerce")
        df.dropna(subset=["–î–∞—Ç–∞", "–°—É–º–∞"], inplace=True)

        if df.empty:
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.")
            return

        selected_analysis = self.analysis_type_cb.get()
        fig, ax = plt.subplots(figsize=(8, 6), dpi=100)

        if "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫)" in selected_analysis:
            grouped = df.groupby("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")["–°—É–º–∞"].sum()
            grouped.plot(kind="bar", ax=ax, color="royalblue", alpha=0.8)
            ax.set_title("–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")
            ax.set_xlabel("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")
            ax.set_ylabel("–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç")
            ax.tick_params(axis='x', rotation=45)

        elif "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (—Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫)" in selected_analysis:
            grouped = df.groupby(["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è"])["–°—É–º–∞"].sum()
            grouped.index = grouped.index.map(lambda x: f"{x[0]}: {x[1]}")
            grouped.plot(kind="bar", ax=ax, color="forestgreen", alpha=0.8)
            ax.set_title("–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")
            ax.set_xlabel("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
            ax.set_ylabel("–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç")
            ax.tick_params(axis='x', rotation=75)

        elif "–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (–∫—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞)" in selected_analysis:
            grouped = df.groupby("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")["–°—É–º–∞"].sum()
            ax.pie(grouped, labels=grouped.index, autopct='%1.1f%%', startangle=140)
            ax.set_title("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")

        elif "–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—è–º–∏ (–ª—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫)" in selected_analysis:
            df.set_index("–î–∞—Ç–∞", inplace=True)
            monthly = df.resample('M')["–°—É–º–∞"].sum()
            monthly.plot(kind="line", ax=ax, marker="o", color="firebrick", linewidth=2)
            ax.set_title("–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—è–º–∏")
            ax.set_xlabel("–ú—ñ—Å—è—Ü—å")
            ax.set_ylabel("–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç")
            plt.setp(ax.get_xticklabels(), rotation=45)
            df.reset_index(inplace=True)

        elif "–¢–û–ü-5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫)" in selected_analysis:
            grouped = df.groupby("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")["–°—É–º–∞"].sum().sort_values(ascending=False)
            top_5 = grouped.head(5)
            top_5.plot(kind="barh", ax=ax, color="orange", alpha=0.8)
            ax.set_title("–¢–û–ü-5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            ax.set_xlabel("–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç")
            ax.invert_yaxis()

        fig.tight_layout()
        canvas = FigureCanvasTkAgg(fig, master=self.canvas_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(expand=True, fill="both")

    # -------------------------------------------------------------
    # –í–∫–ª–∞–¥–∫–∞ "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏"
    # -------------------------------------------------------------
    def setup_records_tab(self):
        content_frame = ttk.Frame(self.records_frame, style="MainFrame.TFrame")
        content_frame.pack(expand=True, fill="both", padx=20, pady=20)

        self.tree = ttk.Treeview(
            content_frame,
            columns=("–î–∞—Ç–∞", "–°—É–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ö–æ–º–µ–Ω—Ç–∞—Ä"),
            show="headings"
        )
        self.tree.pack(expand=True, fill="both")

        for col in ("–î–∞—Ç–∞", "–°—É–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ö–æ–º–µ–Ω—Ç–∞—Ä"):
            self.tree.heading(col, text=col)
            self.tree.column(col, width=120)

        ttk.Button(content_frame, text="–û–Ω–æ–≤–∏—Ç–∏", command=self.load_records).pack(pady=10)

        # –ù–∞–ª–∞—à—Ç—É—î–º–æ —Ç–µ–≥–∏ –¥–ª—è ‚Äú—Å–º—É–≥–∞—Å—Ç–∏—Ö‚Äù —Ä—è–¥–∫—ñ–≤
        self.tree.tag_configure("evenrow", background="#ffffff")
        self.tree.tag_configure("oddrow", background="#f7f7f7")

    def load_records(self):
        df = self.expense_manager.get_expenses()
        self.tree.delete(*self.tree.get_children())

        for i, row in enumerate(df.itertuples(index=False), start=1):
            # row ‚Äî –∫–æ—Ä—Ç–µ–∂ –∑ –¥–∞–Ω–∏–º–∏ (–î–∞—Ç–∞, –°—É–º–∞, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è, –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è, –ö–æ–º–µ–Ω—Ç–∞—Ä)
            # i ‚Äî –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ä—è–¥–∫—ñ–≤
            tag = "evenrow" if i % 2 == 0 else "oddrow"
            self.tree.insert("", "end", values=row, tags=(tag,))

    # -------------------------------------------------------------
    # –í–∫–ª–∞–¥–∫–∞ "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"
    # -------------------------------------------------------------
    def setup_admin_tab(self):
        admin_main_frame = ttk.Frame(self.admin_frame, style="MainFrame.TFrame")
        admin_main_frame.pack(expand=True, fill="both", padx=20, pady=20)

        tree_frame = ttk.Frame(admin_main_frame, style="MainFrame.TFrame")
        tree_frame.pack(side="left", fill="both", expand=True)

        self.category_tree = ttk.Treeview(tree_frame, columns=("Type",), show="tree headings")
        self.category_tree.heading("#0", text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è / –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", anchor="w")
        self.category_tree.column("#0", width=200)
        self.category_tree.pack(side="left", fill="both", expand=True)

        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=self.category_tree.yview)
        vsb.pack(side="right", fill="y")
        self.category_tree.configure(yscrollcommand=vsb.set)

        # –ù–∞–ª–∞—à—Ç—É—î–º–æ —Ç–µ–≥–∏ –¥–ª—è —Å–º—É–≥–∞—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤
        self.category_tree.tag_configure("evenrow", background="#ffffff")
        self.category_tree.tag_configure("oddrow", background="#f7f7f7")

        buttons_frame = ttk.Frame(admin_main_frame, style="MainFrame.TFrame")
        buttons_frame.pack(side="right", fill="y", padx=10, pady=10)

        ttk.Label(buttons_frame, text="–ù–æ–≤–∞ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è:").pack(pady=5)
        self.new_category_entry = ttk.Entry(buttons_frame, width=20)
        self.new_category_entry.pack(pady=2)

        ttk.Button(buttons_frame, text="–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", command=self.add_category).pack(pady=2)
        ttk.Button(buttons_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", command=self.delete_category).pack(pady=15)

        ttk.Label(buttons_frame, text="–ù–æ–≤–∞ –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:").pack(pady=5)
        self.new_subcategory_entry = ttk.Entry(buttons_frame, width=20)
        self.new_subcategory_entry.pack(pady=2)

        ttk.Button(buttons_frame, text="–î–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é", command=self.add_subcategory).pack(pady=2)
        ttk.Button(buttons_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é", command=self.delete_subcategory).pack(pady=15)

        ttk.Button(buttons_frame, text="–û–Ω–æ–≤–∏—Ç–∏ –¥–µ—Ä–µ–≤–æ", command=self.populate_category_tree).pack(pady=20)

        self.populate_category_tree()

    def populate_category_tree(self):
        self.category_tree.delete(*self.category_tree.get_children())

        # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–º—É–≥–∞—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤
        row_index = 1

        for cat, subcats in self.category_manager.categories.items():
            tag = "evenrow" if row_index % 2 == 0 else "oddrow"
            cat_id = self.category_tree.insert("", "end", text=cat, open=True, tags=(tag,))
            row_index += 1

            # –î–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–µ–∂ –∑—Ä–æ–±–∏–º–æ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è
            for sub in subcats:
                tag2 = "evenrow" if row_index % 2 == 0 else "oddrow"
                self.category_tree.insert(cat_id, "end", text=sub, tags=(tag2,))
                row_index += 1

    def add_category(self):
        new_cat = self.new_category_entry.get().strip()
        if not new_cat:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!")
            return
        if new_cat in self.category_manager.categories:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{new_cat}' –≤–∂–µ —ñ—Å–Ω—É—î.")
            return

        self.category_manager.categories[new_cat] = []
        self.category_manager.save_categories()
        self.populate_category_tree()
        self.new_category_entry.delete(0, tk.END)
        self.show_notification(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{new_cat}' –¥–æ–¥–∞–Ω–æ!")

    def delete_category(self):
        selection = self.category_tree.selection()
        if not selection:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return

        item_id = selection[0]
        cat_name = self.category_tree.item(item_id, "text")

        parent_id = self.category_tree.parent(item_id)
        if parent_id:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —Å–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –∞ –Ω–µ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
            return

        confirm = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{cat_name}'?")
        if confirm:
            if cat_name in self.category_manager.categories:
                del self.category_manager.categories[cat_name]
                self.category_manager.save_categories()
                self.populate_category_tree()
                self.show_notification(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{cat_name}' –≤–∏–¥–∞–ª–µ–Ω–æ!")

    def add_subcategory(self):
        new_sub = self.new_subcategory_entry.get().strip()
        if not new_sub:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!")
            return

        selection = self.category_tree.selection()
        if not selection:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!")
            return

        item_id = selection[0]
        cat_name = self.category_tree.item(item_id, "text")
        parent_id = self.category_tree.parent(item_id)
        if parent_id:
            cat_name = self.category_tree.item(parent_id, "text")

        if cat_name not in self.category_manager.categories:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –≤—É–∑–æ–ª)!")
            return

        if new_sub in self.category_manager.categories[cat_name]:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è '{new_sub}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{cat_name}'.")
            return

        self.category_manager.categories[cat_name].append(new_sub)
        self.category_manager.save_categories()
        self.populate_category_tree()
        self.new_subcategory_entry.delete(0, tk.END)
        self.show_notification(f"–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{new_sub}' –¥–æ–¥–∞–Ω–æ –¥–æ '{cat_name}'!")

    def delete_subcategory(self):
        selection = self.category_tree.selection()
        if not selection:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return

        item_id = selection[0]
        sub_name = self.category_tree.item(item_id, "text")
        parent_id = self.category_tree.parent(item_id)
        if not parent_id:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —Å–∞–º–µ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –∞ –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
            return

        cat_name = self.category_tree.item(parent_id, "text")
        confirm = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{sub_name}'?")
        if confirm:
            if cat_name in self.category_manager.categories:
                if sub_name in self.category_manager.categories[cat_name]:
                    self.category_manager.categories[cat_name].remove(sub_name)
                    self.category_manager.save_categories()
                    self.populate_category_tree()
                    self.show_notification(f"–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{sub_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ '{cat_name}'!")

    # -------------------------------------------------------------
    # –ú–µ—Ç–æ–¥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    # -------------------------------------------------------------
    def show_notification(self, message):
        self.notification_label.config(text=message, foreground="green")
        self.root.after(3000, lambda: self.notification_label.config(text=""))
